1、
利用するクラウドはAWSと想定します
APIサーバー利用する言語：java、golangなどapiフレームワークあり、
ハイパフォマンス言語を選択、python、rubyなどLL言語だとパフォマンスが懸念点です
＝＝＝＝＝＝
クライアント（携帯、ブラウザなど）→R53→ALB→AutoScalingGroup→EC2（APIサーバー）
＝＝＝＝＝＝
理由：
R53:名前解決
ALB: HTTPS通信で使用するLB、healthcheck機能などもあり
AutoScalingGourp:CPU利用率などグループ内のEC2インスタンスのメトリクスを監視
して、負荷が高くなるとスケールアウト、負荷が低くなるとスケールインできます
Cloudwatch Eventsと併用すればピークタイムでのスケールアウトなどにも対応可能
EC2:用途にあったインスタンスを選択できます、APIサーバーの場合CPU、メモリー、帯域
などメトリクスで選択します
ミドルウェア：
nginx:リバースプロキシ、自由に設定ができ、セキュリティを高める、サーバープロセス
が落ちる時５００返信などができます
td-agent, logstash:アプリケーションをログをより安全にロギングサービス（ストア）
に送信します
systemd: OS内のミドルウェアとアプリケーションプロセスの死活監視、再起動を担当します
datadog, mackerel:インスタンス各種メトリクス監視、AWSインディグレション
で各所AWSサービスの状態監視、アラート
＝＝＝＝＝＝＝＝＝＝
EC2 →　Kinesis →　Lambda →　Redis（Elasticache）
                           Aurora
                           ElastciSearch
                           S3
CDN(CloudFront)
＝＝＝＝＝＝＝＝＝＝
APIサーバーがユーザーの投稿を永続性のあるKinesisに入れて、
Lambdaワーカーが投稿内容を
１、RDBMSのAuroraに保存する
２、各ユーザーのタイムラインを保存するRedisに保存する
３、キーワード検索できるようElasticSearchに入れます
４、写真、動画などメディアファイルをS3にアップロードする
Aurora理由：ハイパフォーマンス6４TBまで拡張可能、フルマネージド（オペレーションコスト低い）
Redis理由：オンメモリーKVS、ユーザーが高速に自分のタイムラインを取得可能、
リクエストされてからRDBMSからフィードなどデータをjoinすると遅すぎる
ElasticSearch理由：文字検索エンジンとして利用、トレンドやキーワード検索機能を実現
S3理由：高可用性オブジェクトストアなため、ロストしない
CDN:READ専用コンテンツ（写真、動画などをキャッシュする）、より高速且つ安価に
コンテンツをクライアントに届ける

２、実装すべき機能
 1、ユーザー登録: 
 ユーザーがメールアドレスとパスワードでログインできる機能
 パスワードのハッシュでパスワード認証を行います
 2. フォロー機能
 他のユーザーをフォローする機能
 3.　タイムライン表示機能
 フォローされたユーザー（FOLLOWEE）の投稿が
 フォローをしたユーザー(FOLLOWER)のタイムラインにて表示する
 4. フォローワー一覧:
 自分をフォローしたユーザーの一覧を表示する
 5.　ユーザープロファイル機能
 ユーザーが自己紹介、アイコン画像、タイムライン背景写真などカスタマイズできる要素
 のあるプロファイル機能
 6. 投稿機能
 ユーザーがテキスト、写真、動画を投稿する機能
 写真、動画はサーバー側でオブジェクトストレージ（AWS S3）にアップロードしてから
 アップロード先のURLを投稿するフィードに入れます、フィードを表示する時URLがあれば
 クライアント側でメディアファイルをCDN経由で取得します
 7. ハッシュタグ（Tagging）機能
 投稿にタグをつける機能、タグがキーワードとして投稿を検索できます
 8. トレンド機能
 9. 検索機能
 投稿からキーワードを抽出して検索できるようにする機能、ElasticSearch使用
 10. ユーザーメンション機能
 
３、DB設計
USER:
  USER_ID: UUID4
  USER_PASSWORD_HASH: VARCHAR
  USER_NAME: VARCHAR
  USER_EMAIL: VARCHAR
  USER_ICON_URL: VARCHAR
  USER_BG_IMAGE_URL: VARCHAR
  USER_DESCRIPTION: VARCHAR
  
  PRIMARY KEY: USER_ID
  UNIQUE KEY: USER_EMAIL
FOLLOW:
  FOLLOWEE_ID: FOREIGN KEY(USER.USER_ID)
  FOLLOWER_ID: FOREIGN KEY(USER.USER_ID)
  PRIMARY KEY: (FOLLOWEE_ID, FOLLOWER_ID)
  INDEX: (FOLLOWER_ID, FOLLOWEE_ID)
  
FEED:
  USER_ID: FOREIGN KEY(USER.USER_ID)
  FEED_CONTENT: VARCHAR(140)
  FEED_ID: UUID4
  PRIMARY KEY: FEED_ID
  
  ４、セキュリティー、スケーラビリティイシュー
  セキュリティー：
  ユーザーパスワードを平文で保存しない
  
  ログイン三回連続失敗したらログイン機能を一時ロック及び登録メアドに通知
  
  短時間内（一分内、五分内、一日以内）ユーザーの投稿できる数を制限する（DDOS対策）
  
  
  
  スケーラビリティ：
  タイムライン作成について、リクエストごとDBからデーター取得してjoinするのが遅い
  から、fanoutメカニズムを採用して、ユーザーが投稿したら、自分のフォロワーのタイムたいん
  （RedisのHSET、整列されたセット）にインサートした方がRTTが低い
  
  ただ、フォロワー数の多いユーザー同士がやりとりする時、fanoutが間に合わなくて、
  時系列的な不整合がでるかも、そういうユーザーの投稿はDBから取得するようにする
  
  Redis容量を節約するため、一ヶ月以上ログインしないユーザーのタイムラインはRedis
  に作らないようにする
  
  FOLLOWテーブルが重すぎる時Graphデータベースの採用を視野に入れても良い

  
